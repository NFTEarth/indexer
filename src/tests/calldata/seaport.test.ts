import { config as dotEnvConfig } from "dotenv";
dotEnvConfig();
import { config } from "@/config/index";
import { Seaport } from "@nftearth/sdk";
import { keccak256 } from "ethers/lib/utils";
import { toUtf8Bytes } from "@ethersproject/strings";
import { BigNumber } from "ethers";
import { padSourceToSalt } from "@/orderbook/orders/seaport/build/utils";

jest.setTimeout(1000 * 1000);

export const generateSourceBytes = (source?: string) => {
  return source ? keccak256(toUtf8Bytes(source)).slice(2, 10) : "";
};

describe("CallData - Seaport", () => {
  it("parseOrder", async () => {
    const exchange = new Seaport.Exchange(config.chainId);
    const inputData =
      "0xfb0f3ee10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000420000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d87e555900180000000000000000000000000008d2aa100579118c241ba2d961922e803a06785ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099030c3f880a468ed74806fb2785afd2da54a2f40000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000063d85cf30000000000000000000000000000000000000000000000000000000063fe98ae00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8f071677aaa2ab4ab4436bae2c098ec6e520000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000cd0b087e113152324fca962488b4d9beb6f4caf6f100000000000000000000f10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000078ed254b9c140c1a2be10d2ad32c65b5f712f54b0000000000000000000000000000000000000000000000000000000000000041da5cc91ab94ba5dedf4c764a4837dedabd1530d71811794108c1a00ee806a9f45cea34832783a7c2c3f40ec335499315f32412561e2ce76cd7f3e9dd6702dec11b0000000000000000000000000000000000000000000000000000000000000035bfd7eb";
    const args = exchange.contract.interface.decodeFunctionData("fulfillBasicOrder", inputData);
    const orderSourceHash = args.parameters.salt._hex.slice(2, 10);

    const openseaHash = "a8f07167";
    const source = "nftearth.exchange";
    const sourceHash = generateSourceBytes(source);

    const salt = "1234";
    const saltSource = padSourceToSalt(source, salt);
    const saltWithSource = BigNumber.from(saltSource)._hex;

    expect(saltWithSource.slice(2, 10)).toBe(openseaHash);
    expect(sourceHash).toBe(openseaHash);
    expect(orderSourceHash).toBe(openseaHash);
  });
});
